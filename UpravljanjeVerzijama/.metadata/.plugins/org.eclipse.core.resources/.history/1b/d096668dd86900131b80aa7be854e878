import java.awt.Cursor;
import java.awt.EventQueue;

import javax.swing.JFrame;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.Status;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.api.errors.InvalidRemoteException;
import org.eclipse.jgit.api.errors.TransportException;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.storage.file.FileRepositoryBuilder;

import org.eclipse.jgit.errors.NoWorkTreeException;
import org.eclipse.jgit.lib.RepositoryCache.FileKey;
import org.eclipse.jgit.revwalk.RevCommit;
import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider;
import org.eclipse.jgit.util.FS;

import javax.swing.JLabel;
import net.miginfocom.swing.MigLayout;

import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTabbedPane;
import javax.swing.JButton;
import javax.swing.JTable;
import javax.swing.SwingWorker;
import javax.swing.ToolTipManager;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JList;
import javax.swing.JTree;
import javax.swing.SwingConstants;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;

import de.javasoft.plaf.synthetica.SyntheticaBlackMoonLookAndFeel;
import java.awt.Font;

public class Test {

	private static JFrame frmUpravljanjeRevizijama;
	private JLabel lblRadniDirektorij;
	private JSearchTextField txtDirektorij;
	private JButton btnPromijeni;
	private JButton btnRevisions;
	private String AdresaRepozitorija;
	private Repository Repozitorij;
	private JList<Class<RevCommit>> list;
	private JTree tree;
	private JTree treeStatus;
	private JTabbedPane centralTab;
	private JToolBarExtended toolBarRepositoryOperations;
	private FileSystemModel repositoryContents;
	private JTable commitHistoryTable;
	private static final String REMOTE_URL = "https://github.com/ri5-nsi/projekat.git";
	private static UsernamePasswordCredentialsProvider credentialsProvider = new UsernamePasswordCredentialsProvider("ri5-nsi", "Rezonansa5");
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Test window = new Test();
					window.frmUpravljanjeRevizijama.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public Test() {
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		try {
			UIManager.setLookAndFeel(new SyntheticaBlackMoonLookAndFeel());
		} catch (Exception e) {
			try {
				UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
			} catch (ClassNotFoundException | InstantiationException
					| IllegalAccessException | UnsupportedLookAndFeelException e1) {
				
				JOptionPane.showMessageDialog(frmUpravljanjeRevizijama, "Problem pri učitavanju konfiguracije korisničkog interfejsa!", "Fatal error", JOptionPane.WARNING_MESSAGE);
				return;
			}
		}
		
		frmUpravljanjeRevizijama = new JFrame();
		frmUpravljanjeRevizijama.setTitle("Upravljanje revizijama");
		frmUpravljanjeRevizijama.setBounds(100, 100, 1000, 700);
		frmUpravljanjeRevizijama.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frmUpravljanjeRevizijama.setLocationRelativeTo(null);
		frmUpravljanjeRevizijama.getContentPane().setLayout(new MigLayout("nogrid, fillx, insets 10", "", "[][][][][]"));
		
		btnRevisions = new JButton(getLocalIcon("IconConf", "Korisnik"));
		//btnRevisions.setBackground(new Color(105, 105, 105));
		btnRevisions.setText("Konfiguracija");
		btnRevisions.setFocusPainted(false);
		btnRevisions.setIconTextGap(10);
		frmUpravljanjeRevizijama.getContentPane().add(btnRevisions, "width 200");
		
		lblRadniDirektorij = new JLabel("Radni direktorij:");
		lblRadniDirektorij.setFont(new Font("Dialog", Font.BOLD, 12));
		lblRadniDirektorij.setHorizontalAlignment(SwingConstants.CENTER);
		//frmUpravljanjeRevizijama.getContentPane().add(lblRadniDirektorij, "width 140");
		
		txtDirektorij = new JSearchTextField();
		txtDirektorij.setColumns(10);
		txtDirektorij.setTextWhenNotFocused(" Izaberite radni direktorij ");
		txtDirektorij.setIcon(this.getLocalIcon("IconFolder", "Direktorij"));
		frmUpravljanjeRevizijama.getContentPane().add(txtDirektorij, "growx, height 30");
		
		btnPromijeni = new JButton("Promijeni");
		btnPromijeni.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				JFileChooser chooser = new JFileChooser();
				chooser.setCurrentDirectory(new File("."));
				chooser.setDialogTitle("Lokacija repozitorija");
			    chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
			    chooser.setAcceptAllFileFilterUsed(false);
			    int returnVal = chooser.showOpenDialog(frmUpravljanjeRevizijama);
			    if(returnVal == JFileChooser.APPROVE_OPTION) {
			    	try {
						setAdresaRepozitorija(chooser.getSelectedFile().getCanonicalPath());
						LoadRepository load = new LoadRepository();
						load.execute();
					} catch (IOException e1) {
						e1.printStackTrace();
					}
			    }
			}
		});
		frmUpravljanjeRevizijama.getContentPane().add(btnPromijeni, "width 50, height 28, wrap");
		
		frmUpravljanjeRevizijama.getContentPane().add(new JSeparator(SwingConstants.HORIZONTAL), "spanx, wrap");
		
		list = new JList<Class<RevCommit>>();
		frmUpravljanjeRevizijama.getContentPane().add(list, "width 200, height 250, spany");
		
		toolBarRepositoryOperations = new JToolBarExtended();
		frmUpravljanjeRevizijama.getContentPane().add(toolBarRepositoryOperations, "growx, height 250");

		centralTab = new JTabbedPane();
		tree = new JTree();
		tree.setModel(null);
		tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
		commitHistoryTable = new JTable();
		commitHistoryTable.setFillsViewportHeight(true);
		commitHistoryTable.setAutoCreateRowSorter(true);
		commitHistoryTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
		treeStatus = new JTree();
		treeStatus.putClientProperty("JTree.lineStyle", "None");
		treeStatus.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
		treeStatus.setCellRenderer(new StatusTreeRenderer());
		ToolTipManager.sharedInstance().registerComponent(treeStatus);
		JScrollPane qPane1 = new JScrollPane(tree, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		JScrollPane qPane2 = new JScrollPane(commitHistoryTable, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		JScrollPane qPane3 = new JScrollPane(treeStatus, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		centralTab.addTab("Repozitorij", qPane1);
		centralTab.addTab("Revizije", qPane2);
		centralTab.addTab("Status", qPane3);
		toolBarRepositoryOperations.add(centralTab);
	}

	private void setAdresaRepozitorija(String adresaRepozitorija) {
		AdresaRepozitorija = adresaRepozitorija;

//		        for (RevCommit rev : logs) {
//		            //System.out.println("Commit: " + rev.getId()  + ", komentar: " + rev.getFullMessage() + ", autor: " + rev.getAuthorIdent().getName());
//		            //System.out.println("Had " + count + " commits overall on current branch");
//		            
//		            if (count == 0) {
//		            	RevTree revTree = rev.getTree();
//		            	
//		            	
//			            TreeWalk treeWalk = new TreeWalk(Repozitorij);
//			            treeWalk.addTree(revTree);
//			            treeWalk.setRecursive(true);
//			            DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode(Repozitorij.getWorkTree().getName());
//			            DefaultMutableTreeNode tmp = null;
//			            while(treeWalk.next()) {
//			            	RecursiveListGenerator(treeWalk);
//			            	if (treeWalk.isSubtree())
//			            	{
//			            		treeWalk.getObjectReader()
//			            		rootNode.add(new DefaultMutableTreeNode(treeWalk.getNameString()));
//			            		
//			            	}
//			            	else {
//			            		tmp = new DefaultMutableTreeNode(treeWalk.getNameString());
//			            		rootNode.add(tmp);
//			            	}
//			                System.out.println("Putanja: " + treeWalk. + "Naziv: " + treeWalk.getNameString());
//			            }
//			            tree.setModel(new DefaultTreeModel(rootNode));
//		            }
//		            
//		        }

				/*
				DefaultListModel<String> listModel = new DefaultListModel<String> ();
				Map<String,Ref> repositoryReferences = Repozitorij.getAllRefs();
				for (Map.Entry<String, Ref> entry : repositoryReferences.entrySet()) {
					listModel.addElement(entry.getKey());
					System.out.println(entry.getKey());
				}
				list.setModel(listModel);
				*/
	}
	
	private ImageIcon getLocalIcon(String imageName, String altText) {
        String imgLocation = "images/"+ imageName + ".png";
        URL imageURL = Test.class.getResource(imgLocation);
        if (imageURL != null) {
            return new ImageIcon(imageURL, altText);
        } else {
            System.err.println("Slika nije pronađena: " + imgLocation);
            return null;
        }
	}
	
	private class LoadRepository extends SwingWorker<Void, Void> {
        @Override
        public Void doInBackground() {
        	try {
	        	frmUpravljanjeRevizijama.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
	        	FileRepositoryBuilder builder = new FileRepositoryBuilder();
				
				if (!FileKey.isGitRepository(new File(AdresaRepozitorija, ".git"), FS.DETECTED)) {
					Object[] options = {"Kreiraj", "Odustani"};
					int n = JOptionPane.showOptionDialog(frmUpravljanjeRevizijama, "Izabrani direktorij ne sadrži verzionisane datoteke. Da li želite kreirati novi repozitorij?",
							"Novi repozitorij", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
					if (n == JOptionPane.YES_OPTION)
						Git.cloneRepository().setURI(REMOTE_URL).setCredentialsProvider(credentialsProvider).setDirectory(new File(AdresaRepozitorija)).call();
					else
						return null;
				}
				
				Repozitorij = builder.setGitDir(new File(AdresaRepozitorija, ".git")).readEnvironment().findGitDir().build();
				txtDirektorij.setText(Repozitorij.getWorkTree().getCanonicalPath());
				repositoryContents = new FileSystemModel(new File(Repozitorij.getWorkTree().getCanonicalPath()));
				tree.setModel(repositoryContents);
				Git git = new Git(Repozitorij);
				
				Iterable<RevCommit> logs = git.log().all().call();
		        commitHistoryTable.setModel(new CommitHistoryTableModel(logs));
		        commitHistoryTable.getColumnModel().getColumn(0).setPreferredWidth(80);
		        commitHistoryTable.getColumnModel().getColumn(3).setPreferredWidth(220);
		        
		        Status status = git.status().call();
		        DefaultMutableTreeNode rootNodeStatus = new DefaultMutableTreeNode("status");
		        
		        DefaultMutableTreeNode statusConflictsNode = new DefaultMutableTreeNode("Konflikti");
		        for(String conflict : status.getConflicting())
		        	statusConflictsNode.add(new DefaultMutableTreeNode(conflict));
		        
		        DefaultMutableTreeNode statusAddedNode = new DefaultMutableTreeNode("Dodani");
		        for(String added : status.getAdded())
		        	statusAddedNode.add(new DefaultMutableTreeNode(added));
		        
		        DefaultMutableTreeNode statusChangedNode = new DefaultMutableTreeNode("Modifikovani");
		        for(String changed : status.getChanged())
		        	statusChangedNode.add(new DefaultMutableTreeNode(changed));
		        
		        DefaultMutableTreeNode statusDeletedNode = new DefaultMutableTreeNode("Obrisani");
		        for(String deleted : status.getRemoved())
		        	statusDeletedNode.add(new DefaultMutableTreeNode(deleted));
		        
		        DefaultMutableTreeNode statusMissingNode = new DefaultMutableTreeNode("Nedostajući");
		        for(String missing : status.getMissing())
		        	statusMissingNode.add(new DefaultMutableTreeNode(missing));
		        
		        DefaultMutableTreeNode statusUntrackedNode = new DefaultMutableTreeNode("Neindeksirani");
		        for(String Untracked : status.getUntracked())
		        	statusUntrackedNode.add(new DefaultMutableTreeNode(Untracked));
		        
		        rootNodeStatus.add(statusConflictsNode);
		        rootNodeStatus.add(statusAddedNode);
		        rootNodeStatus.add(statusChangedNode);
		        rootNodeStatus.add(statusDeletedNode);
		        rootNodeStatus.add(statusMissingNode);
		        rootNodeStatus.add(statusUntrackedNode);
		        treeStatus.setModel(new DefaultTreeModel(rootNodeStatus));
		        treeStatus.setRootVisible(false);
		        treeStatus.setShowsRootHandles(true);
	        }
	        catch (NoWorkTreeException nwte) {
				JOptionPane.showMessageDialog(frmUpravljanjeRevizijama, "Repozitorij ne sadrži radni direktorij!", "Upozorenje", JOptionPane.WARNING_MESSAGE);
			}
			catch (IllegalStateException ise) {
				JOptionPane.showMessageDialog(frmUpravljanjeRevizijama, "Repozitorij već postoji!", "Upozorenje", JOptionPane.WARNING_MESSAGE);
			} 
			catch (IOException e) {
				JOptionPane.showMessageDialog(frmUpravljanjeRevizijama, "Problem pri pristupu izabranom direktoriju!", "Upozorenje", JOptionPane.WARNING_MESSAGE);;
			} catch (InvalidRemoteException e) {
				e.printStackTrace();
			} catch (TransportException e) {
				e.printStackTrace();
			} catch (GitAPIException e) {
				e.printStackTrace();
			}
			return null;
        }
 
        @Override
        public void done() {
            frmUpravljanjeRevizijama.setCursor(null);
        }
    }
}
