import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.util.Iterator;
import java.util.Vector;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTextArea;
import javax.swing.JTree;
import javax.swing.event.TreeModelEvent;
import javax.swing.event.TreeModelListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;

import org.eclipse.jgit.errors.CorruptObjectException;
import org.eclipse.jgit.errors.IncorrectObjectTypeException;
import org.eclipse.jgit.errors.MissingObjectException;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.revwalk.RevTree;
import org.eclipse.jgit.treewalk.TreeWalk;

 
class FileSystemModel implements TreeModel {
  private File root;
  private RevTree revTree;
  private Repository Repozitorij;
 
  private Vector listeners = new Vector();
 
  public FileSystemModel(File rootDirectory, RevTree revTree, Repository repozitorij) {
    root = rootDirectory;
    this.revTree = revTree;
    this.Repozitorij = repozitorij;
  }
 
  public Object getRoot() {
    return root;
  }
 
  public Object getChild(Object parent, int index) {
    	File directory = (File) parent;
    	FilenameFilter filter = new FilenameFilter() {
	        public boolean accept(File directory, String fileName) {
	        	if (fileName.equals(".git"))
	            	return false;
	        	TreeWalk treeWalk;
				try {
					treeWalk = TreeWalk.forPath(Repozitorij, directory.getPath(), revTree);
					while(treeWalk.next()) {
		        		if (treeWalk.getNameString().equalsIgnoreCase(fileName))
		        			return true;
		        	}
		            return false;
				} catch (MissingObjectException e) {
					e.printStackTrace();
				} catch (IncorrectObjectTypeException e) {
					e.printStackTrace();
				} catch (CorruptObjectException e) {
					e.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
				}
				return false;
	        }
    	};
    	
		String[] children = directory.list(filter);
		return new TreeFile(directory, children[index]);
  }
 
  public int getChildCount(Object parent) {
    File file = (File) parent;
    if (file.isDirectory()) {
      String[] fileList = file.list();
      if (fileList != null)
        return file.list().length;
    }
    return 0;
  }
 
  public boolean isLeaf(Object node) {
    File file = (File) node;
    return file.isFile();
  }
 
  public int getIndexOfChild(Object parent, Object child) {
    File directory = (File) parent;
    File file = (File) child;
    String[] children = directory.list();
    for (int i = 0; i < children.length; i++) {
      if (file.getName().equals(children[i])) {
        return i;
      }
    }
    return -1;
 
  }
 
  public void valueForPathChanged(TreePath path, Object value) {
    File oldFile = (File) path.getLastPathComponent();
    String fileParentPath = oldFile.getParent();
    String newFileName = (String) value;
    File targetFile = new File(fileParentPath, newFileName);
    oldFile.renameTo(targetFile);
    File parent = new File(fileParentPath);
    int[] changedChildrenIndices = { getIndexOfChild(parent, targetFile) };
    Object[] changedChildren = { targetFile };
    fireTreeNodesChanged(path.getParentPath(), changedChildrenIndices, changedChildren);
 
  }
 
  private void fireTreeNodesChanged(TreePath parentPath, int[] indices, Object[] children) {
    TreeModelEvent event = new TreeModelEvent(this, parentPath, indices, children);
    Iterator iterator = listeners.iterator();
    TreeModelListener listener = null;
    while (iterator.hasNext()) {
      listener = (TreeModelListener) iterator.next();
      listener.treeNodesChanged(event);
    }
  }
 
  public void addTreeModelListener(TreeModelListener listener) {
    listeners.add(listener);
  }
 
  public void removeTreeModelListener(TreeModelListener listener) {
    listeners.remove(listener);
  }
 
  private class TreeFile extends File {
    public TreeFile(File parent, String child) {
      super(parent, child);
    }
 
    public String toString() {
      return getName();
    }
  }
}