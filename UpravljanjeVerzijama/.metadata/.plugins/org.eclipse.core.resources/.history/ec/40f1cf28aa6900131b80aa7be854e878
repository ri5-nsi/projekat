import javax.swing.table.AbstractTableModel;

import org.eclipse.jgit.revwalk.RevCommit;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

class CommitHistoryTableModel extends AbstractTableModel {
        private String[] columnNames = {"Datum",
        								"Autor",
                                        "E-mail",
                                        "Komentar",
                                        "Commit ID"};
        
        private List<RevCommit> data;
        
        public CommitHistoryTableModel(Iterable<RevCommit> logs) {
        	data = new ArrayList<RevCommit>();
        	for (RevCommit rev : logs) {
        		data.add(rev);
        	}
        }
 
        public int getColumnCount() {
            return columnNames.length;
            
        }
 
        public int getRowCount() {
            return data.size();
        }
 
        public String getColumnName(int col) {
            return columnNames[col];
        }
 
        public Object getValueAt(int row, int col) {
        	switch(col)
        	{
        		case 0: return new Date(data.get(row).getCommitTime() * 1000).toString();
        		case 1: return data.get(row).getAuthorIdent().getName();
        		case 2: return data.get(row).getAuthorIdent().getEmailAddress();
        		case 3: return data.get(row).getFullMessage();
        		case 4: return data.get(row).getId().toString();
        		default: return null;
        	}
        }
 
        /*
         * JTable uses this method to determine the default renderer/
         * editor for each cell.  If we didn't implement this method,
         * then the last column would contain text ("true"/"false"),
         * rather than a check box.
         */
        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }
 
        /*
         * Don't need to implement this method unless your table's
         * editable.
         
        public boolean isCellEditable(int row, int col) {
            //Note that the data/cell address is constant,
            //no matter where the cell appears onscreen.
            if (col < 2) {
                return false;
            } else {
                return true;
            }
        }
        */
        /*
         * Don't need to implement this method unless your table's
         * data can change.
         
        public void setValueAt(Object value, int row, int col) {
        	switch(col)
        	{
        		case 0: return new Date(data.get(row).getCommitTime() * 1000).toString();
        		case 1: return data.get(row).getAuthorIdent().getName();
        		case 2: return data.get(row).getAuthorIdent().getEmailAddress();
        		case 3: return data.get(row).getFullMessage();
        		case 4: return data.get(row).getId().toString();
        		default: return null;
        	}
            data[row][col] = value;
            fireTableCellUpdated(row, col);
        }
         */
    }
